(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[691],{422:(E,t,n)=>{"use strict";n.d(t,{wE:()=>O,A3:()=>l,GH:()=>N,Df:()=>S,Dq:()=>u,gg:()=>D,FD:()=>R,BC:()=>L});var T=n(7058),a=n(1417),A=n(1423);async function e(E){var t,n,T;let A=await (0,a.parseStringPromise)(E,{explicitArray:!1}),e=null==A||null==(T=A.ENVELOPE)||null==(n=T.BODY)||null==(t=n.DATA)?void 0:t.COLLECTION;if(!e)throw Error("Cannot find COLLECTION element");return(Array.isArray(e.LEDGER)?e.LEDGER:[e.LEDGER]).map(E=>E.$.NAME)}async function c(E){return await (0,T.AT)("","POST",E,{},"application/xml","text")}function s(E){let t=E.match(/<CREATED>(\d+)<\/CREATED>/),n=E.match(/<EXCEPTIONS>(\d+)<\/EXCEPTIONS>/);return{created:t?parseInt(t[1],10):0,exceptions:n?parseInt(n[1],10):0}}let r=["cgst0%","cgst2.5%","cgst6%","cgst9%","cgst14%","igst0%","igst5%","igst12%","igst18%","igst28%","ut/sgst0%","ut/sgst2.5%","ut/sgst6%","ut/sgst9%","ut/sgst14%"];async function i(E){let t="<ENVELOPE>\n  <HEADER><TALLYREQUEST>Import Data</TALLYREQUEST></HEADER>\n  <BODY><IMPORTDATA><REQUESTDESC><REPORTNAME>All Masters</REPORTNAME></REQUESTDESC>\n  <REQUESTDATA>";for(let n of E){let E=n.toLowerCase().startsWith("igst")?"IGST":"CGST";t+='<TALLYMESSAGE xmlns:UDF="TallyUDF">\n    <LEDGER Action="Create">\n      <NAME>'.concat(n,"</NAME>\n      <PARENT>Duties &amp; Taxes</PARENT>\n      <TAXTYPE>").concat(E,"</TAXTYPE>\n    </LEDGER>\n</TALLYMESSAGE>")}t+="</REQUESTDATA></IMPORTDATA></BODY></ENVELOPE>";try{let E=await c(t);return{success:!0,data:E}}catch(E){return{success:!1,data:""}}}async function o(E){var t,n,T,A,e,c;let s=await (0,a.parseStringPromise)(E,{explicitArray:!1}),r=null==s||null==(T=s.ENVELOPE)||null==(n=T.BODY)||null==(t=n.DATA)?void 0:t.COLLECTION;if(!r)return[];let i=Array.isArray(r.LEDGER)?r.LEDGER:[r.LEDGER],o=new Set,D=[];for(let E of i){let t=(null==(A=E.$)?void 0:A.NAME)||"",n=(null==(c=E["LEDGSTREGDETAILS.LIST"])||null==(e=c.GSTIN)?void 0:e.trim())||"";n&&!o.has(n)&&(o.add(n),D.push({name:t,gst:n}))}return D}async function D(E){var t,n,T,A,e,s;let r=await c(E),i=await (0,a.parseStringPromise)(r,{explicitArray:!1}),o=(null==i||null==(A=i.ENVELOPE)||null==(T=A.BODY)||null==(n=T.DATA)||null==(t=n.COLLECTION)?void 0:t.COMPANY)||[];return{success:!0,data:Array.isArray(o)?o.map(E=>{var t,n;return(null==(t=E.NAME)?void 0:t._)||(null==(n=E.$)?void 0:n.NAME)}):[(null==(e=o.NAME)?void 0:e._)||(null==(s=o.$)?void 0:s.NAME)]}}async function R(E){let t=await c(E);return await o(t)}async function L(E){let t=await c(E),n=await e(t),T=r.filter(E=>!n.includes(E));if(T.length){let E=s((await i(T)).data);return{success:E.created===T.length,data:E,ledgerName:T}}return{success:!0,data:{},ledgerName:n}}async function l(E,t,n){let T=await c(E),a=await e(T);if(!a.includes(t)){let E='<ENVELOPE>\n      <HEADER><TALLYREQUEST>Import Data</TALLYREQUEST></HEADER>\n      <BODY><IMPORTDATA><REQUESTDESC><REPORTNAME>All Masters</REPORTNAME></REQUESTDESC>\n      <REQUESTDATA>\n        <TALLYMESSAGE xmlns:UDF="TallyUDF">\n          <LEDGER Action="Create">\n            <NAME>'.concat(n.name,"</NAME>\n            <PARENT>").concat(n.parent,"</PARENT>\n            ").concat(n.date&&n.gstin?"<LEDGSTREGDETAILS.LIST>\n              <APPLICABLEFROM>".concat(n.date,"</APPLICABLEFROM>\n              <GSTREGISTRATIONTYPE>Regular</GSTREGISTRATIONTYPE>\n              <GSTIN>").concat(n.gstin,"</GSTIN>\n            </LEDGSTREGDETAILS.LIST>\n            <LEDMAILINGDETAILS.LIST>\n              <APPLICABLEFROM>").concat(n.date,"</APPLICABLEFROM>\n              <STATE>").concat(n.state,"</STATE>\n              <COUNTRY>").concat(n.country,"</COUNTRY>\n            </LEDMAILINGDETAILS.LIST>"):"","\n          </LEDGER>\n        </TALLYMESSAGE>\n      </REQUESTDATA></IMPORTDATA></BODY></ENVELOPE>");return{success:!0,data:s(await c(E)),ledgerName:await e(T)}}return{success:!0,isExist:!0,data:a}}async function S(E,t){let n=await c(E);if(!(await e(n)).includes(t)){let E=function(E){if(!E)throw Error("Purchase name is required");return'<ENVELOPE>\n  <HEADER><TALLYREQUEST>Import Data</TALLYREQUEST></HEADER>\n  <BODY>\n    <IMPORTDATA>\n      <REQUESTDESC><REPORTNAME>All Masters</REPORTNAME></REQUESTDESC>\n      <REQUESTDATA>\n        <TALLYMESSAGE>\n          <LEDGER NAME="'.concat(E,'" Action="Create">\n            <NAME>').concat(E,"</NAME>\n            <PARENT>Purchase Accounts</PARENT>\n            <APPROPRIATEFOR>GST</APPROPRIATEFOR>\n            <GSTAPPROPRIATETO>Goods and Services</GSTAPPROPRIATETO>\n          </LEDGER>\n        </TALLYMESSAGE>\n      </REQUESTDATA>\n    </IMPORTDATA>\n  </BODY>\n</ENVELOPE>")}(t);return{success:1===s(await (0,T.AT)("","POST",E,{},"application/xml","text")).created,data:t}}return{success:!0,isExist:!0,data:t}}async function u(E){let t=await c('<ENVELOPE>\n    <HEADER><TALLYREQUEST>Export</TALLYREQUEST><TYPE>Collection</TYPE><ID>Custom List of Units</ID></HEADER>\n    <BODY><DESC><TDL><TDLMESSAGE>\n      <COLLECTION NAME="Custom List of Units"><TYPE>Units</TYPE><NATIVEMETHOD>MasterID</NATIVEMETHOD><NATIVEMETHOD>GUID</NATIVEMETHOD></COLLECTION>\n    </TDLMESSAGE></TDL></DESC></BODY>\n</ENVELOPE>'),n=await e(t),T=E.filter(E=>!n.includes(E.name));if(T.length){let t=function(E){let t=E.map((E,t)=>{let n="bf911d27-633e-4ad7-ba7c-a871d6f9461e-".concat((263+t).toString().padStart(8,"0"));return'<TALLYMESSAGE xmlns:UDF="TallyUDF">\n  <UNIT NAME="'.concat(E.name,'" RESERVEDNAME="">\n    <NAME>').concat(E.name,"</NAME>\n    <GUID>").concat(n,"</GUID>\n    <ALTERID>").concat(1005+t,"</ALTERID>\n    <DECIMALPLACES>").concat(E.decimal,"</DECIMALPLACES>\n  </UNIT>\n</TALLYMESSAGE>")});return"<ENVELOPE>\n  <HEADER><TALLYREQUEST>Import Data</TALLYREQUEST></HEADER>\n  <BODY>\n    <IMPORTDATA>\n      <REQUESTDESC><REPORTNAME>All Masters</REPORTNAME></REQUESTDESC>\n      <REQUESTDATA>\n        ".concat(t.join("\n"),"\n      </REQUESTDATA>\n    </IMPORTDATA>\n  </BODY>\n</ENVELOPE>")}(T);return{success:s(await c(t)).created===T.length,data:E}}return{success:!0,isExist:[],data:E}}async function O(E){let t=await c('<ENVELOPE>\n    <HEADER><TALLYREQUEST>Export</TALLYREQUEST><TYPE>Collection</TYPE><ID>Custom List of StockItems</ID></HEADER>\n    <BODY><DESC><TDL><TDLMESSAGE>\n      <COLLECTION NAME="Custom List of StockItems"><TYPE>StockItem</TYPE><NATIVEMETHOD>MasterID</NATIVEMETHOD><NATIVEMETHOD>GUID</NATIVEMETHOD></COLLECTION>\n    </TDLMESSAGE></TDL></DESC></BODY>\n</ENVELOPE>'),n=await e(t),T=E.filter(E=>!n.includes(E.Product));if(T.length){let t=function(E){let t=E.map((E,t)=>{let n="bf911d27-633e-4ad7-ba7c-a871d6f9461e-".concat((269+t).toString().padStart(8,"0"));return'<TALLYMESSAGE xmlns:UDF="TallyUDF">\n  <STOCKITEM NAME="'.concat(E.Product,'" RESERVEDNAME="">\n    <GUID>').concat(n,"</GUID>\n    <ALTERID>").concat(1011+t,"</ALTERID>\n    <BASEUNITS>").concat(E.symbol,"</BASEUNITS>\n  </STOCKITEM>\n</TALLYMESSAGE>")});return"<ENVELOPE>\n  <HEADER><TALLYREQUEST>Import Data</TALLYREQUEST></HEADER>\n  <BODY>\n    <IMPORTDATA>\n      <REQUESTDESC><REPORTNAME>All Masters</REPORTNAME></REQUESTDESC>\n      <REQUESTDATA>\n        ".concat(t.join("\n"),"\n      </REQUESTDATA>\n    </IMPORTDATA>\n  </BODY>\n</ENVELOPE>")}(T);return{success:s(await c(t)).created===T.length,data:E}}return{success:!0,isExist:[],data:E}}async function N(E){let t=function(E){let t=(0,A.A)(),n="".concat((0,A.A)(),":00001"),T=E.items.map(E=>"<ALLINVENTORYENTRIES.LIST>\n  <STOCKITEMNAME>".concat(E.name,"</STOCKITEMNAME>\n  <RATE>").concat(E.price,"</RATE>\n  <AMOUNT>-").concat(E.price*E.quantity,"</AMOUNT>\n  <ACTUALQTY>").concat(E.quantity," ").concat(E.unit,"</ACTUALQTY>\n</ALLINVENTORYENTRIES.LIST>")).join("");return'<ENVELOPE>\n  <HEADER><TALLYREQUEST>Import Data</TALLYREQUEST></HEADER>\n  <BODY>\n    <IMPORTDATA>\n      <REQUESTDESC><REPORTNAME>All Masters</REPORTNAME></REQUESTDESC>\n      <REQUESTDATA>\n        <TALLYMESSAGE xmlns:UDF="TallyUDF">\n          <VOUCHER REMOTEID="'.concat(t,'" VCHKEY="').concat(n,'" VCHTYPE="Purchase" ACTION="Create">\n            <DATE>').concat(E.invoiceDate,"</DATE>\n            <PARTYLEDGERNAME>").concat(E.partyName,"</PARTYLEDGERNAME>\n            <VOUCHERNUMBER>").concat(E.invoiceNumber,"</VOUCHERNUMBER>\n            ").concat(T,"\n          </VOUCHER>\n        </TALLYMESSAGE>\n      </REQUESTDATA>\n    </IMPORTDATA>\n  </BODY>\n</ENVELOPE>")}(E),n=await c(t);return{success:s(n).created>0,data:n}}},4114:(E,t,n)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/next",function(){return n(9008)}])},7058:(E,t,n)=>{"use strict";n.d(t,{$o:()=>T,AT:()=>a});let T="https://finetic-ai.primedepthlabs.com",a=async function(E,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,T=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"application/json",A=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"json";try{let e,c={"Content-Type":a,...T},s={method:t,headers:c},r="http://localhost:9000"+E;console.log("Making request to:",r),n&&"GET"!==t&&(a.includes("xml")?s.body="string"==typeof n?n:n.toString():a.includes("json")&&"string"!=typeof n?s.body=JSON.stringify(n):s.body=n);let i=await fetch(r,s);if(!i.ok){let E=await i.text();throw Error("Error from API request: ".concat(i.status," ").concat(i.statusText,"\n").concat(E))}switch(A.toLowerCase()){case"json":default:e=await i.json();break;case"text":case"xml":e=await i.text()}return e}catch(t){throw console.error("API Error for",E,":",t),t}}}},E=>{var t=t=>E(E.s=t);E.O(0,[141,727,614,8,636,593,792],()=>t(4114)),_N_E=E.O()}]);